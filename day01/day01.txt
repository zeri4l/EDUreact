

React?
 복잡한 사용자 인터페이스를 쉽게 구축하기 위해 메타에서 개발한 라이브러리

React의 핵심 컨셉

    1. Component (컴포넌트)
        한가지 이상의 기능을 수행하는 UI를 모듈화
        각각의 페이지 구성에 필요한 Component를 조립하여 페이지를 완성한다

        => 이점
        길어질 수 있는 코드에 대한 가독성 해결
        반복되는 UI의 재사용
        단일 책임 원칙 (한가지의 기능) - 유지보수

    2. Virtual Dom (가상돔)
        DOM API를 사용하지 않습니다.
        React가 가지고 있는 가상의 DOM tree, 실제 사용자가 보고 있는 DOM 간섭X
        state(상태 값)을 구독, 상태 값이 바뀌었다면, 바뀐 부분만 화면을 다시 그림

        => 이점
        reflow repaint 과정이 state가 변했을 때 최초 1회만 시행
        상태값만을 구독하고 있기 때문에 화면을 바꾸는 시점을 개발자가 컨트롤 쉬움
        domapi에 접근하지 못하는게 아닙니다 (지양) -> DOM API(X)

        function Banner(){
            const state = true -> false

            return <div style={{
                color: state ? "red" : "blue"
            }}>안녕하세요</div>
        }


    3. ReRendering
        상태가 바뀌면 상태가 바뀐 함수만 재실행하기 때문에 다른 함수(UI)는
        다시 그려지지 않는다

------------------------------------------------------------------

    SPA, MPA

        SPA (Single Page Application)
        html 파일이 하나 (도화지) 주소(URL)에 따라 필요한 컴포넌트를 도화지에
        조립하는 것

        MPA (Multi Page Application)
        html이 여러개

    CSR, SSR

        CSR (Client Side Rendering)
            사용자가 웹 사이트에 접속했을 때 페이지 랜더링에 필요한
            리소스를 다운로드하고 브라우저 엔진이 화면을 랜더링

            장점
                첫 랜더링 이후 전환 속도가 빠름
                서버 부담 감소로 인한 서버 비용 감소

            단점
                초기 페이지 랜더링 속도가 느림
                검색 엔진 최적화(SEO)가 불리하다
                사용자 하드웨어에 의존하여 화면을 그린다

        SSR (Server Side Rendering)
            사용자가 웹 페이지 접속 -> 프론트 엔드 서버에 요청
            -> 프론트 엔드 페이지가 그려질 수 있는 준비

            장점
                완성된 페이지를 보게되는 시간이 짧습니다
                -----------(백엔드에 요청한 데이터)

                SEO(검색 엔진 최적화)
                <meta title=""/>
            
            단점
                만약 서버에서 그리는 시간이 길어진다면 비어있거나 로딩화면을
                오래 볼 수 있다 (무거운 페이지라면 CSR보다 오래 걸릴 수 있다)

                서버 부담 증가 (서버의 하드웨어가 중요)

------------------------------------------------------------------
    
    react는 index.html이 몇개 => 1개
    프론트엔드 서버에 대해서 리소스 요청은 몇회 => 1회 (한번에)
    nextJS (reactJS의 슈퍼셋)

------------------------------------------------------------------

    React 프로젝트 생성

        1. CRA(Create React App)
            https://create-react-app.dev/docs/getting-started

            (경로 맞추기)

            npx create-react-app example1 
            cd example1 
            npm start


        2. Vite

------------------------------------------------------------------

    패키지 관리 도구
        패키지(프로젝트를 실행하고 있는 폴더)에서 실행할 수 있는 명령어를 관리하는 도구
        - 스크립트 명령어
        - 라이브러리 설치 및 삭제


        npm, npx, yarn, yarn berry, pnpm
        ---       ---- >> 기본 패키지 관리도구
                        ----------------- >> 모노레포 관리 도구
                  
        npm
            nodejs에서 내장되어있는 기본 관리 도구
            ex) react부터는 라이브러리를 사용할 때 CDN으로 사용하지 않습니다 --> 라이브러리를 설치 
                패키지 관리도구를 사용하기 위해서는 경로를 패키치로 맞추는 것이 중요합니다. cd example1

                npm i(install) 라이브러리명(aos)
                npm rm(remove, uninstall) 라이브러리명


        npx
            nodejs에서 내장되어있는 도구 라이브러리를 설치하지 않아도 명령어를 통해 실행
            (특수한 상황이나 일회성 사용하는 라이브러리를 활용하거나 스크립트를 실행할 때 사용)


        yarn
            실무에서는 가장 많이 사용하고 있는 도구, npm보다 보안이나 속도가 약간 빠르다라는 장점
            
            npm i -g(global) yarn (컴퓨터에 설치)

            yarn add 라이브러리명
            yarn remove 라이브러리명

        하나의 프로젝트에서는 하나의 패키지 관리 도구만 사용

------------------------------------------------------------------
  
    리엑트 폴더 구조
        node_modules : 현재 패키지에 설치된 라이브러리의 실제 코드들이 저장
                     : 용량이 큼 git에 올리지 않습니다 (제외)
                     : package.json이 있다면 언제든 재설치 -->  npm install, yarn

        public  : 정적 파일을 관리, 페비콘, index.html, sitemap, robots (검색엔진)
        * src (source) : 개발이 진행되는 공간
        .gitignore : git에 올리지 않을 파일을 정의
        package-lock.json : 패키지에 설치된 라이브러리의 실제 설치 주소와 버전이 맵핑
        * package.json : 실행 스크립트를 정의, 설치된 라이브러리 목록, 프로젝트 정보, 버전관리
        README.md : mark down

------------------------------------------------------------------

        src
            App.css : 최상위 css (rest-css, 공용)
            ** App.js : 최상위 컴포넌트, 사용자가 볼 수 있는 UI
            App.test.js : 테스트 코드 예시 파일
            index.css : 최상위 css (rest-css, 공용)
            ** index.js : app.js를 index.html의 root로 랜더링, 리엑트의 랜더 원리
            logo.svg : 예시 이미지 파일
            reportWebVitals.js : 프론트 엔드 성능 얼마만에 랜더링이 되었는지 체크 프로파일링
            setupTests.js : testcode에 필요한 도구를 전역으로 등록 (테스트를 도와주는 도구)

------------------------------------------------------------------